}
ui <- fluidPage(
tabPanel("Input",
column(4,
wellPanel(
checkboxGroupInput("data_format",
"The data consists of",
c("Mean and standard deviation" = "mean_sd",
"Mean and standard error" = "mean_se",
"Mean and standard deviation (log scale)" = "log_mean_sd",
"Mean and standard error (log scale)" = "log_mean_se",
"Median, min, and max" =  "median_range",
"Median, Q1, and Q3" = 'median_iqr',
"Five point summary" = 'five_point'
# "Other combination" = 'other')
)
),
# p("Please note that selecting 'other' may result in invalid combinations."),
# titlePanel("Number of Entries"),
numericInput("n_entries",
"Number of Concentrations to estimate:",
value = 1,
min = 1),
actionButton("update_table", "Update Table")
)
),
column(8,
rHandsontableOutput("input_data") )
),
tabPanel("Output",
column(12,
tableOutput("test_output")
)
)
)
server <- function(input, output) {
# create or update the data frame by adding some rows
values <- reactiveValues()
observeEvent(input$update_table, {
# determine which variables to show based on user input
values$shown_variables <- unique(unlist(lapply(input$data_format, function(x) {
switch(x,
"mean_sd" = c('mean', 'sd'),
"mean_se" = c('mean', 'se'),
'log_mean_sd' = c("log_mean", 'log_sd'),
"log_mean_se" = c('log_mean', 'log_se'),
"median_range" = c('median','min', 'max'),
'median_IQR' = c("median", 'q1','q3'),
"five_point" = c('median', 'min', 'q1', 'q3', 'max'))
})))
# if a table does not already exist, this is our DF
if (input$update_table == 1) {
values$df <- make_DF(input$n_entries)
} else { # otherwise,  append the new data frame to the old.
tmp_data <- hot_to_r(input$input_data)
values$df[,names(tmp_data)] <- tmp_data
values$df <- bind_rows(values$df, make_DF(input$n_entries))
}
# finally, set up table for data entry
DF_shown <- values$df[c('protein', 'MW', 'n', values$shown_variables, "units")]
output$test_output <- renderTable(values$df)
output$input_data <- renderRHandsontable({rhandsontable(DF_shown)})
})
}
shinyApp(ui = ui, server = server)
library(rhandsontable)
library(shiny)
editTable <- function(DF, outdir=getwd(), outfilename="table"){
ui <- shinyUI(fluidPage(
titlePanel("Edit and save a table"),
sidebarLayout(
sidebarPanel(
helpText("Shiny app based on an example given in the rhandsontable package.",
"Right-click on the table to delete/insert rows.",
"Double-click on a cell to edit"),
wellPanel(
h3("Table options"),
radioButtons("useType", "Use Data Types", c("TRUE", "FALSE"))
),
br(),
wellPanel(
h3("Save table"),
div(class='row',
div(class="col-sm-6",
actionButton("save", "Save")),
div(class="col-sm-6",
radioButtons("fileType", "File type", c("ASCII", "RDS")))
)
)
),
mainPanel(
wellPanel(
uiOutput("message", inline=TRUE)
),
actionButton("cancel", "Cancel last action"),
br(), br(),
rHandsontableOutput("hot"),
br(),
wellPanel(
h3("Add a column"),
div(class='row',
div(class="col-sm-5",
uiOutput("ui_newcolname"),
actionButton("addcolumn", "Add")),
div(class="col-sm-4",
radioButtons("newcolumntype", "Type", c("integer", "double", "character"))),
div(class="col-sm-3")
)
)
)
)
))
server <- shinyServer(function(input, output) {
values <- reactiveValues()
## Handsontable
observe({
if (!is.null(input$hot)) {
values[["previous"]] <- isolate(values[["DF"]])
DF = hot_to_r(input$hot)
} else {
if (is.null(values[["DF"]]))
DF <- DF
else
DF <- values[["DF"]]
}
values[["DF"]] <- DF
})
output$hot <- renderRHandsontable({
DF <- values[["DF"]]
if (!is.null(DF))
rhandsontable(DF, useTypes = as.logical(input$useType), stretchH = "all")
})
## Save
observeEvent(input$save, {
fileType <- isolate(input$fileType)
finalDF <- isolate(values[["DF"]])
if(fileType == "ASCII"){
dput(finalDF, file=file.path(outdir, sprintf("%s.txt", outfilename)))
}
else{
saveRDS(finalDF, file=file.path(outdir, sprintf("%s.rds", outfilename)))
}
}
)
## Cancel last action
observeEvent(input$cancel, {
if(!is.null(isolate(values[["previous"]]))) values[["DF"]] <- isolate(values[["previous"]])
})
## Add column
output$ui_newcolname <- renderUI({
textInput("newcolumnname", "Name", sprintf("newcol%s", 1+ncol(values[["DF"]])))
})
observeEvent(input$addcolumn, {
DF <- isolate(values[["DF"]])
values[["previous"]] <- DF
newcolumn <- eval(parse(text=sprintf('%s(nrow(DF))', isolate(input$newcolumntype))))
values[["DF"]] <- setNames(cbind(DF, newcolumn, stringsAsFactors=FALSE), c(names(DF), isolate(input$newcolumnname)))
})
## Message
output$message <- renderUI({
if(input$save==0){
helpText(sprintf("This table will be saved in folder \"%s\" once you press the Save button.", outdir))
}else{
outfile <- ifelse(isolate(input$fileType)=="ASCII", "table.txt", "table.rds")
fun <- ifelse(isolate(input$fileType)=="ASCII", "dget", "readRDS")
list(helpText(sprintf("File saved: \"%s\".", file.path(outdir, outfile))),
helpText(sprintf("Type %s(\"%s\") to get it.", fun, outfile)))
}
})
})
## run app
runApp(list(ui=ui, server=server))
return(invisible())
}
editTable()
library(rhandsontable)
library(shiny)
editTable <- function(DF, outdir=getwd(), outfilename="table"){
ui <- shinyUI(fluidPage(
titlePanel("Edit and save a table"),
sidebarLayout(
sidebarPanel(
helpText("Shiny app based on an example given in the rhandsontable package.",
"Right-click on the table to delete/insert rows.",
"Double-click on a cell to edit"),
wellPanel(
h3("Table options"),
radioButtons("useType", "Use Data Types", c("TRUE", "FALSE"))
),
br(),
wellPanel(
h3("Save table"),
div(class='row',
div(class="col-sm-6",
actionButton("save", "Save")),
div(class="col-sm-6",
radioButtons("fileType", "File type", c("ASCII", "RDS")))
)
)
),
mainPanel(
wellPanel(
uiOutput("message", inline=TRUE)
),
actionButton("cancel", "Cancel last action"),
br(), br(),
rHandsontableOutput("hot"),
br(),
wellPanel(
h3("Add a column"),
div(class='row',
div(class="col-sm-5",
uiOutput("ui_newcolname"),
actionButton("addcolumn", "Add")),
div(class="col-sm-4",
radioButtons("newcolumntype", "Type", c("integer", "double", "character"))),
div(class="col-sm-3")
)
)
)
)
))
server <- shinyServer(function(input, output) {
values <- reactiveValues()
## Handsontable
observe({
if (!is.null(input$hot)) {
values[["previous"]] <- isolate(values[["DF"]])
DF = hot_to_r(input$hot)
} else {
if (is.null(values[["DF"]]))
DF <- DF
else
DF <- values[["DF"]]
}
values[["DF"]] <- DF
})
output$hot <- renderRHandsontable({
DF <- values[["DF"]]
if (!is.null(DF))
rhandsontable(DF, useTypes = as.logical(input$useType), stretchH = "all")
})
## Save
observeEvent(input$save, {
fileType <- isolate(input$fileType)
finalDF <- isolate(values[["DF"]])
if(fileType == "ASCII"){
dput(finalDF, file=file.path(outdir, sprintf("%s.txt", outfilename)))
}
else{
saveRDS(finalDF, file=file.path(outdir, sprintf("%s.rds", outfilename)))
}
}
)
## Cancel last action
observeEvent(input$cancel, {
if(!is.null(isolate(values[["previous"]]))) values[["DF"]] <- isolate(values[["previous"]])
})
## Add column
output$ui_newcolname <- renderUI({
textInput("newcolumnname", "Name", sprintf("newcol%s", 1+ncol(values[["DF"]])))
})
observeEvent(input$addcolumn, {
DF <- isolate(values[["DF"]])
values[["previous"]] <- DF
newcolumn <- eval(parse(text=sprintf('%s(nrow(DF))', isolate(input$newcolumntype))))
values[["DF"]] <- setNames(cbind(DF, newcolumn, stringsAsFactors=FALSE), c(names(DF), isolate(input$newcolumnname)))
})
## Message
output$message <- renderUI({
if(input$save==0){
helpText(sprintf("This table will be saved in folder \"%s\" once you press the Save button.", outdir))
}else{
outfile <- ifelse(isolate(input$fileType)=="ASCII", "table.txt", "table.rds")
fun <- ifelse(isolate(input$fileType)=="ASCII", "dget", "readRDS")
list(helpText(sprintf("File saved: \"%s\".", file.path(outdir, outfile))),
helpText(sprintf("Type %s(\"%s\") to get it.", fun, outfile)))
}
})
})
## run app
runApp(list(ui=ui, server=server))
return(invisible())
}
( DF <- data.frame(Value = 1:10, Status = TRUE, Name = LETTERS[1:10],
Date = seq(from = Sys.Date(), by = "days", length.out = 10),
stringsAsFactors = FALSE) )
editTable(DF, outdir="D:/", outfilename="newDF")
reachSelect<-data.frame(Source = as.character(""),
PercentReduction = as.numeric(NA),
selectionVariable = as.character(""),
Min = as.numeric(NA),
Max = as.numeric(NA),
Equals = as.character(""),
Separator = as.character(""))
reachSelect
reachSelect<-data.frame(Source = as.character(""),
PercentReduction = as.character("")),
selectionVariable = as.character(""),
Min = as.character(""),
Max = as.character(""),
Equals = as.character(""),
Separator = as.character(""))
reachSelect<-data.frame(Source = as.character(""),
PercentReduction = as.character(""),
selectionVariable = as.character(""),
Min = as.character(""),
Max = as.character(""),
Equals = as.character(""),
Separator = as.character(""))
reachSelect
library(rhandsontable)
library(shiny)
reachSelect<-data.frame(Source = as.character(""),
PercentReduction = as.character(""),
SelectionVariable = as.character(""),
Min = as.character(""),
Max = as.character(""),
Equals = as.character(""),
Separator = as.character(""))
ui <- shinyUI(fluidPage(
titlePanel("Edit and save a table"),
sidebarLayout(
sidebarPanel(
helpText("Shiny app based on an example given in the rhandsontable package.",
"Right-click on the table to delete/insert rows.",
"Double-click on a cell to edit"),
rHandsontableOutput("hot")
)))
server <- shinyServer(function(input, output) {
values <- reactiveValues()
## Handsontable
observe({
if (!is.null(input$hot)) {
values[["previous"]] <- isolate(values[["DF"]])
DF = hot_to_r(input$hot)
} else {
if (is.null(values[["DF"]]))
DF <- DF
else
DF <- values[["DF"]]
}
values[["DF"]] <- DF
})
output$hot <- renderRHandsontable({
DF <- values[["DF"]]
if (!is.null(DF))
rhandsontable(DF, useTypes = as.logical(input$useType), stretchH = "all")
})
})
runApp(list(ui=ui, server=server)
library(rhandsontable)
library(shiny)
DF<-data.frame(Source = as.character(""),
PercentReduction = as.character(""),
SelectionVariable = as.character(""),
Min = as.character(""),
Max = as.character(""),
Equals = as.character(""),
Separator = as.character(""))
ui <- shinyUI(fluidPage(
titlePanel("Edit and save a table"),
sidebarLayout(
sidebarPanel(
helpText("Shiny app based on an example given in the rhandsontable package.",
"Right-click on the table to delete/insert rows.",
"Double-click on a cell to edit"),
rHandsontableOutput("hot")
)))
server <- shinyServer(function(input, output) {
values <- reactiveValues()
## Handsontable
observe({
if (!is.null(input$hot)) {
values[["previous"]] <- isolate(values[["DF"]])
DF = hot_to_r(input$hot)
} else {
if (is.null(values[["DF"]]))
DF <- DF
else
DF <- values[["DF"]]
}
values[["DF"]] <- DF
})
output$hot <- renderRHandsontable({
DF <- values[["DF"]]
if (!is.null(DF))
rhandsontable(DF, useTypes = as.logical(input$useType), stretchH = "all")
})
})
runApp(list(ui=ui, server=server)
library(rhandsontable)
library(shiny)
DF<-data.frame(Source = as.character(""),
PercentReduction = as.character(""),
SelectionVariable = as.character(""),
Min = as.character(""),
Max = as.character(""),
Equals = as.character(""),
Separator = as.character(""))
ui <- shinyUI(fluidPage(
titlePanel("Edit and save a table"),
sidebarLayout(
sidebarPanel(
helpText("Shiny app based on an example given in the rhandsontable package.",
"Right-click on the table to delete/insert rows.",
"Double-click on a cell to edit"),
rHandsontableOutput("hot")
))))
server <- shinyServer(function(input, output) {
values <- reactiveValues()
## Handsontable
observe({
if (!is.null(input$hot)) {
values[["previous"]] <- isolate(values[["DF"]])
DF = hot_to_r(input$hot)
} else {
if (is.null(values[["DF"]]))
DF <- DF
else
DF <- values[["DF"]]
}
values[["DF"]] <- DF
})
output$hot <- renderRHandsontable({
DF <- values[["DF"]]
if (!is.null(DF))
rhandsontable(DF, useTypes = as.logical(input$useType), stretchH = "all")
})
})
runApp(list(ui=ui, server=server)
library(rhandsontable)
library(shiny)
DF<-data.frame(Source = as.character(""),
PercentReduction = as.character(""),
SelectionVariable = as.character(""),
Min = as.character(""),
Max = as.character(""),
Equals = as.character(""),
Separator = as.character(""))
ui <- shinyUI(fluidPage(
titlePanel("Edit and save a table"),
sidebarLayout(
sidebarPanel(
helpText("Shiny app based on an example given in the rhandsontable package.",
"Right-click on the table to delete/insert rows.",
"Double-click on a cell to edit"),
rHandsontableOutput("hot")
))))
server <- shinyServer(function(input, output) {
values <- reactiveValues()
## Handsontable
observe({
if (!is.null(input$hot)) {
values[["previous"]] <- isolate(values[["DF"]])
DF = hot_to_r(input$hot)
} else {
if (is.null(values[["DF"]]))
DF <- DF
else
DF <- values[["DF"]]
}
values[["DF"]] <- DF
})
output$hot <- renderRHandsontable({
DF <- values[["DF"]]
if (!is.null(DF))
rhandsontable(DF, useTypes = as.logical(input$useType), stretchH = "all")
})
})
runApp(list(ui=ui, server=server))
library(rhandsontable)
library(shiny)
DF<-data.frame(Source = as.character(""),
PercentReduction = as.character(""),
SelectionVariable = as.character(""),
Min = as.character(""),
Max = as.character(""),
Equals = as.character(""),
Separator = as.character(""))
ui <- shinyUI(fluidPage(
titlePanel("Edit and save a table"),
sidebarLayout(
sidebarPanel(
helpText("Shiny app based on an example given in the rhandsontable package.",
"Right-click on the table to delete/insert rows.",
"Double-click on a cell to edit"),
wellPanel(
rHandsontableOutput("hot"))
))))
server <- shinyServer(function(input, output) {
values <- reactiveValues()
## Handsontable
observe({
if (!is.null(input$hot)) {
values[["previous"]] <- isolate(values[["DF"]])
DF = hot_to_r(input$hot)
} else {
if (is.null(values[["DF"]]))
DF <- DF
else
DF <- values[["DF"]]
}
values[["DF"]] <- DF
})
output$hot <- renderRHandsontable({
DF <- values[["DF"]]
if (!is.null(DF))
rhandsontable(DF, useTypes = as.logical(input$useType), stretchH = "all")
})
})
runApp(list(ui=ui, server=server))
